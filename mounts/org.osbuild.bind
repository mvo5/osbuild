#!/usr/bin/python3
"""
Bind mount service

Can (r)bind mount mounts to the tree.
"""

import os.path
import subprocess
import sys
from urllib.parse import urlparse

from osbuild import host, mounts

SCHEMA_2 = """
"additionalProperties": false,
"required": ["name", "type", "target"],
"properties": {
  "name": { "type": "string" },
  "type": { "type": "string" },
  "target": {
    "type": "string",
    "pattern": "^tree://"
  },
  "options": {
    "required": ["source"],
    "source": {
      "type": "string",
      "pattern": "^mount://"
    }
  }
}
"""


def parse_location(location, tree, mountroot: str) -> str:
    # we cannot use "osutil.util.parsing" here because it is too
    # tightly coupled with how arguments for stages are passed
    url = urlparse(location)
    path = url.netloc
    if url.scheme == "tree":
        return os.path.join(tree, path.rstrip("/"))
    if url.scheme == "mount":
        return os.path.join(mountroot, path.rstrip("/"))
    raise ValueError(f"unsupported schema {url.scheme} for {location}")


class BindMount(mounts.MountService):

    def __init__(self, args):
        super().__init__(args)
        self.mountpoint = ""

    @host.callable
    def mount(self, source, target, root, tree, options):
        # we cannot use "sources" here because the osbuild code makes
        # many assumptions about that it must link back to a "Device" so
        # we follow the pattern from org.osbuild.ostree.deployment here
        # and put it into "options"
        source = parse_location(options.get("source"), tree, root)
        self.mountpoint = parse_location(target, tree, root)
        subprocess.run([
            "mount",
            "--rbind", source, self.mountpoint,
        ], check=True)

    def umount(self):
        if self.mountpoint:
            subprocess.run(["umount", "-R", "-v", self.mountpoint], check=True)
            self.mountpoint = ""

    def sync(self):
        pass


def main():
    service = BindMount.from_args(sys.argv[1:])
    service.main()


if __name__ == '__main__':
    main()
